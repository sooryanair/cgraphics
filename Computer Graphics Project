#include <iostream>
//#include <unistd.h>
#include <time.h>
#include <math.h>

// Apple Specific Compatibility Issues
#ifdef __APPLE__
#include "GLUT/glut.h"
#else
#include "GL\glut.h"
#endif

// Define the value of PI, upto 12 decimal places
#define PI 3.141592653589

// ID to detect which scene the story is in.
int SCENE_ID;

// Variables for Animator Faders
GLfloat title_fade, intro_next_text_appear, hs_subtitle_1_appear, girlx = 0, girly = 0;

// Variables for Translation Animators
GLfloat sun_move_left, schoolgirl_x = 1000, schoolgirl_y = 5220;
GLfloat hour = 900;
// Variables for Color Morphers
GLfloat window_top_r = 59, window_top_g = 91, window_top_b = 132,
window_bottom_r = 97, window_bottom_g = 131, window_bottom_b = 159,v=0,i,
sky_r = 12, sky_g = 172, sky_b = 232,
grass_r = 82, grass_g = 163, grass_b = 42,
sun_r = 251, sun_g = 255, sun_b = 163;

// Variables for Turn-based Switching
bool sun_moved_half, sun_has_set, stars_are_made,
chapter_1_done, chapter_2_done, chapter_3_done, chapter_4_done, chapter_5_done, office_done;

// Variables for Random Star Generation
int star_alpha, no_of_stars, stars_array[40][2];

// Function to Create Delay
void delay(float secs) {
	float end = clock() / CLOCKS_PER_SEC + secs;
	while ((clock() / CLOCKS_PER_SEC) < end);
}

// Function to Print Text
void print(const char *string,
	GLfloat r, GLfloat g, GLfloat b, GLfloat a,
	GLint x, GLint y,
	GLfloat w, GLfloat h,
	GLfloat strokeSize) {
	glPushMatrix();

	glColor4f(r, g, b, a);
	glTranslatef(x, y, 0);
	glScalef(w, h, 0);

	glPointSize(strokeSize);
	glLineWidth(strokeSize);

	while (*string)
		glutStrokeCharacter(GLUT_STROKE_MONO_ROMAN, *string++);

	glPopMatrix();

	glLineWidth(1);
	glPointSize(1);
}

/*
* Scene 0 - Introduction Screen
*/
void introduction() {
	// Baccground
	glClearColor(0.05, 5, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);

	// Story Title
	print("GARNIER HAIR NATURALS",
		0, 0, 0, title_fade, 280, 380, .3, .3, 2);

	print("BY SOORYA ,SHUSRITA ,MANSI",
		0, 0, 0, title_fade, 790, 345, .15, .15, 1);
	print("(1DS16CS108,1DS16CS106,1DS16CS129)",
		0, 0, 0, title_fade, 840, 320, .1, .1, 1);

	print("Press N to read the story",
		0, 0, 0, intro_next_text_appear, 400, 150, .15, .15, 1);
	print("Press B to go back",
		0, 0, 0, intro_next_text_appear, 400, 130, .15, .15, 1);
	print("Press P to move hands in dancing frame",
		0, 0, 0, intro_next_text_appear, 400, 110, .15, .15, 1);
	print("Press C to change color in the color box frame",
		0, 0, 0, intro_next_text_appear, 400, 90, .15, .15, 1);
	print("Press Q to quit",
		0, 0, 0, intro_next_text_appear, 400, 70, .15, .15, 1);
}
/*scene 1 at home*/
// Function to Draw Circle
void drawCircle(GLfloat x, GLfloat y,
	GLfloat r, GLfloat g, GLfloat b,
	GLfloat sx, GLfloat sy,
	GLfloat radius) {
	glPushMatrix();

	glTranslatef(x, y, 0);
	glScalef(sx, sy, 0);

	glBegin(GL_POLYGON);
	glColor3ub(r, g, b);
	for (GLfloat i = 0; i < 360; i += 5)
		glVertex2f(radius * sin(i * PI / 180), radius * cos(i * PI / 180));
	glEnd();

	glPopMatrix();
}

// Function to Draw Circle
void drawSemiCircle(GLfloat tx, GLfloat ty,
	GLfloat sx, GLfloat sy,
	GLfloat r, GLfloat g, GLfloat b,
	GLfloat radius,
	GLfloat start_angle, GLfloat end_angle) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	glBegin(GL_POLYGON);
	glColor3ub(r, g, b);
	for (GLfloat i = start_angle; i < end_angle; i += 5)
		glVertex2f(radius * sin(i * PI / 180), radius * cos(i * PI / 180));
	glEnd();

	glPopMatrix();
}

// Function to Draw Arc
void drawArc(GLfloat tx, GLfloat ty,
	GLfloat sx, GLfloat sy,
	GLfloat r, GLfloat g, GLfloat b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	glPointSize(2);
	glBegin(GL_POINTS);
	glColor3ub(r, g, b);
	for (GLfloat i = 90; i < 270; i++)
		glVertex2f(15 * sin(i * PI / 180), 15 * cos(i * PI / 180));
	glEnd();
	glPointSize(1);

	glPopMatrix();
}
// Function to Draw a Woman
void drawWoman(GLfloat tx, GLfloat ty, GLfloat sx, GLfloat sy,
	GLfloat hair_r, GLfloat hair_g, GLfloat hair_b,
	GLfloat top_r, GLfloat top_g, GLfloat top_b,
	GLfloat ribbon_r, GLfloat ribbon_g, GLfloat ribbon_b,
	GLfloat skirt_r, GLfloat skirt_g, GLfloat skirt_b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	// Neck
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(203, 166, 108); // Darker Skin
	glVertex2f(507, 380);
	glVertex2f(507, 360);
	glVertex2f(513, 380);
	glVertex2f(513, 360);
	glEnd();
	glLineWidth(1);

	// Face
	drawCircle(510, 407,
		232, 190, 123, // Lighter Skin
		1, 1,
		30);

	// Hair
	drawSemiCircle(510, 420, 1, .6,
		hair_r, hair_g, hair_b,
		35, -90, 90);

	drawSemiCircle(485, 400, .4, 1,
		hair_r, hair_g, hair_b,
		35, -180, 0);

	// Left Eye
	drawCircle(505, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(508, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Right Eye
	drawCircle(530, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(532, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Smile
	drawArc(514, 388, .5, .3,
		20, 20, 20);

	// Nose
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2f(518, 405);
	glVertex2f(522, 398);
	glVertex2f(522, 398);
	glVertex2f(518, 395);
	glEnd();
	glLineWidth(1);

	// Arms
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(470, 340);
	glVertex2f(470, 240);
	glVertex2f(475, 340);
	glVertex2f(475, 240);
	glVertex2f(480, 340);
	glVertex2f(480, 240);

	glVertex2f(540, 340);
	glVertex2f(540, 240);
	glVertex2f(545, 340);
	glVertex2f(545, 240);
	glVertex2f(550, 340);
	glVertex2f(550, 240);
	glEnd();
	glLineWidth(1);

	// Top
	glBegin(GL_POLYGON);
	glColor3ub(top_r, top_g, top_b);
	glVertex2f(460, 370);
	glVertex2f(560, 370);
	glVertex2f(540, 300);
	glVertex2f(480, 300);
	glEnd();

	// Skirt
	glBegin(GL_POLYGON);
	glColor3ub(skirt_r, skirt_g, skirt_b);
	glVertex2f(480, 300);
	glVertex2f(540, 300);
	glVertex2f(560, 180);
	glVertex2f(460, 180);
	glEnd();

	// Ribbon
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(ribbon_r, ribbon_g, ribbon_b);
	glVertex2f(480, 300);
	glVertex2f(540, 300);
	glEnd();
	glLineWidth(1);

	// Legs
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(490, 180);
	glVertex2f(490, 150);
	glVertex2f(495, 180);
	glVertex2f(495, 150);

	glVertex2f(525, 180);
	glVertex2f(525, 150);
	glVertex2f(530, 180);
	glVertex2f(530, 150);
	glEnd();
	glLineWidth(1);

	glPopMatrix();
}
// Function to Draw Ceiling
void cg_drawCeiling() {
	// Ceiling
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 800);
	glColor3ub(251, 242, 233); // Light Brown
	glVertex2f(200, 700);
	glColor3ub(251, 242, 233); // Light Brown
	glVertex2f(1400, 700);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(1400, 800);
	glEnd();

	// Border for Ceiling
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 800);
	glVertex2f(200, 700);
	glVertex2f(1400, 700);
	glVertex2f(1400, 800);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Side Wall
void cg_drawSideWall() {
	// Side Wall
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 800);
	glColor3ub(251, 242, 233); // Light Brown
	glVertex2f(200, 700);
	glColor3ub(251, 242, 233); // Light Brown
	glVertex2f(200, 175);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 75);
	glEnd();

	// Border for Side Wall
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 800);
	glVertex2f(200, 700);
	glVertex2f(200, 175);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Center Wall
void cg_drawCenterWall() {
	// Center Wall
	glBegin(GL_POLYGON);
	glColor3ub(259, 242, 233); // Light Brown
	glVertex2f(200, 700);
	glColor3ub(259, 242, 233); // Light Brown
	glVertex2f(1400, 700);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(1400, 175);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(200, 175);
	glEnd();

	// Border for Center Wall
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(200, 700);
	glVertex2f(1400, 700);
	glVertex2f(1400, 175);
	glVertex2f(200, 175);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Floor
void cg_drawFloor() {
	// Floor
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(200, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();

	// Border for Floor
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(200, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Outside Baccground
void cg_drawOutside() {
	// Outside
	glBegin(GL_POLYGON);
	glColor3ub(12, 172, 232); // Sky Blue
	glVertex2f(0, 600);
	glVertex2f(180, 540);
	glColor3ub(82, 163, 42); // Green Grass
	glVertex2f(180, 165);
	glVertex2f(0, 75);
	glEnd();
}

// Function to Draw Door
void cg_drawDoor() {
	// Door Hinges
	glLineWidth(6);
	glBegin(GL_LINE_LOOP);
	glColor3ub(63, 36, 19); // Chocolate Brown
	glVertex2f(0, 600);
	glVertex2f(180, 540);
	glVertex2f(180, 165);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);

	// Door
	glBegin(GL_POLYGON);
	glColor3ub(63, 36, 19); // Chocolate Brown
	glVertex2f(180, 540);
	glVertex2f(30, 520);
	glVertex2f(30, 180);
	glVertex2f(180, 165);
	glEnd();

	// Door Knob
	drawCircle(45, 350,
		223, 189, 31, // Goldish Yellow
		1, 1,
		5);
	// window
	// Rectangular Window
	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(1200, 650);
	glVertex2f(1200, 500);
	glVertex2f(1355, 500);
	glColor3ub(97, 131, 159);
	glVertex2f(1355, 650);
	glEnd();

	// Rectangular Window Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1200, 650);
	glVertex2f(1200, 500);
	glVertex2f(1355, 500);
	glVertex2f(1355, 650);
	glEnd();

	// Rectangular Window Panes
	glBegin(GL_LINES);
	glColor3ub(20, 20, 20);
	glVertex2f(1277, 650);
	glVertex2f(1277, 500);
	glVertex2f(1355, 575);
	glVertex2f(1200, 575);
	glEnd();

	// clock
	drawCircle(900, 600,
		1, 1, 1,
		40, 40,
		1);
	// clockhands
	glColor3ub(250, 250, 250);
	//hour
	glPushMatrix();
	//glTranslatef(900, 630,0);
	//glRotatef(-10, 0, 0, 1);

	glBegin(GL_LINES);
	glVertex2f(900, 630);
	//center of the clock
	glVertex2f(900, 600);
	glEnd();
	glPopMatrix();
	//minute
	glBegin(GL_LINES);
	glVertex2f(930, 590);
	//center of the clock
	glVertex2f(900, 600);
	glEnd();
}
void house() {
	// Background
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	cg_drawCeiling();
	cg_drawSideWall();
	cg_drawCenterWall();
	cg_drawFloor();


	cg_drawOutside();

	cg_drawDoor();

	// child
	drawWoman(0, 1, 1, 1,
		1, 1, 0,
		229, 49, 49, // top
		37, 107, 202, // ribbon
		229, 21, 49 // skirt
	);
	//mother
	drawWoman(1, -40, 1.2, 1.2,
		120, 120, 120,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20 // skirt
	);

	print("Child: Mumma remember today is annual day you're coming right?",
		1, 1, 1, hs_subtitle_1_appear, 80, 30, .14, .14, 1);
	print("Mom: Yes I'm ready let's go!",
		1, 1, 1, hs_subtitle_1_appear, 80, 10, .14, .14, 1);
}
/*scene 3*/
// Function to Draw a Woman
void drawWoman11(GLfloat tx, GLfloat ty, GLfloat sx, GLfloat sy,
	GLfloat hair_r, GLfloat hair_g, GLfloat hair_b,
	GLfloat top_r, GLfloat top_g, GLfloat top_b,
	GLfloat ribbon_r, GLfloat ribbon_g, GLfloat ribbon_b,
	GLfloat skirt_r, GLfloat skirt_g, GLfloat skirt_b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	// Neck
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(203, 166, 108); // Darker Skin
	glVertex2f(507, 90);
	glVertex2f(507, 70);
	glVertex2f(513, 90);
	glVertex2f(513, 70);
	glEnd();
	glLineWidth(1);

	// Face
	drawCircle(510, 117,
		232, 190, 123, // Lighter Skin
		1, 1,
		30);

	// Hair
	drawSemiCircle(510, 130, 1, .6,
		hair_r, hair_g, hair_b,
		35, -90, 90);

	drawSemiCircle(485, 110, .4, 1,
		hair_r, hair_g, hair_b,
		35, -180, 0);

	// Left Eye
	drawCircle(505, 120,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(508, 118,
		10, 10, 10,
		1, 1,
		2.5);

	// Right Eye
	drawCircle(530, 120,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(532, 118,
		10, 10, 10,
		1, 1,
		2.5);

	// Smile
	drawArc(514, 95, .5, .3,
		20, 20, 20);

	// Nose
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2f(518, 100);
	glVertex2f(522, 110);
	glVertex2f(522, 110);
	glVertex2f(518, 105);
	glEnd();
	glLineWidth(1);

	// Arms
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(470, 30);
	glVertex2f(470, -80);
	glVertex2f(475, 30);
	glVertex2f(475, -80);
	glVertex2f(480, 30);
	glVertex2f(480, -80);

	glVertex2f(540, 30);
	glVertex2f(540, -80);
	glVertex2f(545, 30);
	glVertex2f(545, -80);
	glVertex2f(550, 30);
	glVertex2f(550, -80);
	glEnd();
	glLineWidth(1);

	// Top
	glBegin(GL_POLYGON);
	glColor3ub(top_r, top_g, top_b);
	glVertex2f(460, 70);
	glVertex2f(560, 70);
	glVertex2f(540, 0);
	glVertex2f(480, 0);
	glEnd();

	// Skirt
	glBegin(GL_POLYGON);
	glColor3ub(skirt_r, skirt_g, skirt_b);
	glVertex2f(480, 0);
	glVertex2f(540, 0);
	glVertex2f(560, -100);
	glVertex2f(460, -100);
	glEnd();

	// Ribbon
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(ribbon_r, ribbon_g, ribbon_b);
	glVertex2f(480, 0);
	glVertex2f(540, 0);
	glEnd();
	glLineWidth(1);

	// Legs
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(490, -100);
	glVertex2f(490, -130);
	glVertex2f(495, -100);
	glVertex2f(495, -130);

	glVertex2f(525, -100);
	glVertex2f(525, -130);
	glVertex2f(530, -100);
	glVertex2f(530, -130);
	glEnd();
	glLineWidth(1);

	glPopMatrix();
}

void s_drawBackground() {
	// Background
	glBegin(GL_POLYGON);
	glColor3ub(sky_r, sky_g, sky_b); // Sky Blue
	glVertex2f(0, 800);
	glVertex2f(1400, 800);
	glVertex2f(1400, 400);
	glVertex2f(0, 400);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(sky_r, sky_g, sky_b); // Sky Blue
	glVertex2f(0, 400);
	glVertex2f(1400, 400);
	glColor3ub(grass_r, grass_g, grass_b); // Green Grass
	glVertex2f(1400, 175);
	glVertex2f(0, 175);
	glEnd();
}

void s_drawSun() {
	// Sun
	drawCircle(1250 - sun_move_left, 700,
		sun_r, sun_g, sun_b,
		1, 1,
		50);
}

void s_drawRoad() {
	// Road
	glBegin(GL_POLYGON);
	glColor3ub(40, 40, 40);
	glVertex2f(0, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();

	glLineWidth(2);
	glBegin(GL_LINES);
	glColor3ub(255, 255, 255);
	glVertex2f(0, 125);
	glVertex2f(200, 125);

	glVertex2f(300, 125);
	glVertex2f(500, 125);

	glVertex2f(600, 125);
	glVertex2f(800, 125);

	glVertex2f(900, 125);
	glVertex2f(1100, 125);

	glVertex2f(1200, 125);
	glVertex2f(1400, 125);
	glEnd();
	glLineWidth(1);
}

void s_drawHome() {
	// Home Bottom
	glBegin(GL_POLYGON);
	glColor3ub(169, 117, 83);
	glVertex2f(1375, 175);
	glColor3ub(181, 145, 113);
	glVertex2f(1375, 300);
	glColor3ub(181, 145, 113);
	glVertex2f(1100, 300);
	glColor3ub(169, 117, 83);
	glVertex2f(1100, 175);
	glEnd();

	// Home Bottom Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1375, 175);
	glVertex2f(1375, 300);
	glVertex2f(1100, 300);
	glVertex2f(1100, 175);
	glEnd();

	// Home Top Left
	glBegin(GL_POLYGON);
	glColor3ub(181, 145, 113);
	glVertex2f(1100, 300);
	glVertex2f(1220, 300);
	glColor3ub(169, 117, 83);
	glVertex2f(1220, 400);
	glVertex2f(1100, 400);
	glEnd();

	// Home Top Left Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1100, 300);
	glVertex2f(1220, 300);
	glVertex2f(1220, 400);
	glVertex2f(1100, 400);
	glEnd();

	// Triangle Rooftop
	glBegin(GL_TRIANGLES);
	glColor3ub(69, 39, 23);
	glVertex2f(1090, 400);
	glVertex2f(1230, 400);
	glVertex2f(1160, 450);
	glEnd();

	// Triangle Rooftop Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1090, 400);
	glVertex2f(1230, 400);
	glVertex2f(1160, 450);
	glEnd();

	// Home Top Right
	glBegin(GL_POLYGON);
	glColor3ub(69, 39, 23);
	glVertex2f(1220, 375);
	glVertex2f(1375, 375);
	glVertex2f(1375, 300);
	glVertex2f(1220, 300);
	glEnd();

	glBegin(GL_LINES);
	glColor3ub(99, 56, 33);
	for (int temp_x = 1220; temp_x <= 1375; temp_x += 5) {
		glVertex2f(temp_x, 375);
		glVertex2f(temp_x, 300);
	}
	for (int temp_y = 300; temp_y <= 375; temp_y += 5) {
		glVertex2f(1220, temp_y);
		glVertex2f(1375, temp_y);
	}
	glEnd();

	// Home Bottom-Top Divider
	glLineWidth(2);
	glBegin(GL_LINES);
	glColor3ub(20, 20, 20);
	glVertex2f(1090, 300);
	glVertex2f(1385, 300);
	glEnd();
	glLineWidth(1);

	// Door
	glBegin(GL_POLYGON);
	glColor3ub(31, 47, 53);
	glVertex2f(1130, 175);
	glVertex2f(1130, 280);
	glVertex2f(1190, 280);
	glVertex2f(1190, 175);
	glEnd();

	// Door Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1130, 175);
	glVertex2f(1130, 280);
	glVertex2f(1190, 280);
	glVertex2f(1190, 175);
	glEnd();

	// Top Window
	glBegin(GL_POLYGON);
	glColor3ub(window_top_r, window_top_g, window_top_b);
	glVertex2f(1130, 330);
	glVertex2f(1130, 370);
	glVertex2f(1190, 370);
	glColor3ub(window_bottom_r, window_bottom_g, window_bottom_b);
	glVertex2f(1190, 330);
	glEnd();

	// Top Window Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1130, 330);
	glVertex2f(1130, 370);
	glVertex2f(1190, 370);
	glVertex2f(1190, 330);
	glEnd();

	// Rectangular Window
	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(1240, 280);
	glVertex2f(1240, 240);
	glVertex2f(1355, 240);
	glColor3ub(97, 131, 159);
	glVertex2f(1355, 280);
	glEnd();

	// Rectangular Window Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(1240, 280);
	glVertex2f(1240, 240);
	glVertex2f(1355, 240);
	glVertex2f(1355, 280);
	glEnd();

	// Rectangular Window Panes
	glBegin(GL_LINES);
	glColor3ub(20, 20, 20);
	glVertex2f(1297, 280);
	glVertex2f(1297, 240);
	glVertex2f(1355, 260);
	glVertex2f(1240, 260);
	glEnd();

	// Top Circle
	drawCircle(1160, 420,
		255, 255, 255,
		1, 1,
		10);
}

void s_drawSchool() {
	// School Building
	glBegin(GL_POLYGON);
	glColor3ub(184, 88, 68);
	glVertex2f(400, 175);
	glVertex2f(1000, 175);
	glVertex2f(1000, 500);
	glColor3ub(241, 130, 94);
	glVertex2f(400, 500);
	glEnd();

	// School Building Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(400, 175);
	glVertex2f(1000, 175);
	glVertex2f(1000, 500);
	glVertex2f(400, 500);
	glEnd();

	// School Board
	glBegin(GL_POLYGON);
	glColor3ub(183, 184, 188);
	glVertex2f(570, 530);
	glVertex2f(830, 530);
	glVertex2f(830, 470);
	glVertex2f(570, 470);
	glEnd();

	// School Board Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(570, 530);
	glVertex2f(830, 530);
	glVertex2f(830, 470);
	glVertex2f(570, 470);
	glEnd();

	print("SCHOOL", 0, 0, 0, 1, 610, 485, .3, .3, 1.5);

	// School Door
	glBegin(GL_POLYGON);
	glColor3ub(183, 184, 188);
	glVertex2f(600, 175);
	glVertex2f(600, 280);
	glVertex2f(800, 280);
	glVertex2f(800, 175);
	glEnd();

	// School Door Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(600, 175);
	glVertex2f(600, 280);
	glVertex2f(800, 280);
	glVertex2f(800, 175);
	glEnd();

	// School Door Divider
	glBegin(GL_LINES);
	glColor3ub(20, 20, 20);
	glVertex2f(700, 280);
	glVertex2f(700, 175);
	glEnd();

	// School Windows
	for (int i = 0; i <= 500; i += 100) {
		for (int j = 0; j <= 100; j += 80) {
			glBegin(GL_POLYGON);
			glColor3ub(59, 91, 132);
			glVertex2f(425 + i, 450 - j);
			glVertex2f(475 + i, 450 - j);
			glVertex2f(475 + i, 400 - j);
			glColor3ub(97, 131, 159);
			glVertex2f(425 + i, 400 - j);
			glEnd();

			glBegin(GL_LINE_LOOP);
			glColor3ub(20, 20, 20);
			glVertex2f(425 + i, 450 - j);
			glVertex2f(475 + i, 450 - j);
			glVertex2f(475 + i, 400 - j);
			glVertex2f(425 + i, 400 - j);
			glEnd();

			glLineWidth(4);
			glBegin(GL_LINES);
			glColor3ub(140, 75, 55);
			glVertex2f(425 + i, 400 - j);
			glVertex2f(475 + i, 400 - j);
			glEnd();
			glLineWidth(1);
		}
	}

	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(425, 280);
	glVertex2f(475, 280);
	glVertex2f(475, 200);
	glColor3ub(97, 131, 159);
	glVertex2f(425, 200);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(425, 280);
	glVertex2f(475, 280);
	glVertex2f(475, 200);
	glVertex2f(425, 200);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(525, 280);
	glVertex2f(575, 280);
	glVertex2f(575, 200);
	glColor3ub(97, 131, 159);
	glVertex2f(525, 200);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(525, 280);
	glVertex2f(575, 280);
	glVertex2f(575, 200);
	glVertex2f(525, 200);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(825, 280);
	glVertex2f(875, 280);
	glVertex2f(875, 200);
	glColor3ub(97, 131, 159);
	glVertex2f(825, 200);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(825, 280);
	glVertex2f(875, 280);
	glVertex2f(875, 200);
	glVertex2f(825, 200);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(925, 280);
	glVertex2f(975, 280);
	glVertex2f(975, 200);
	glColor3ub(97, 131, 159);
	glVertex2f(925, 200);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(925, 280);
	glVertex2f(975, 280);
	glVertex2f(975, 200);
	glVertex2f(925, 200);
	glEnd();

	

}

void s_drawoffice() {
	// office Building
	glBegin(GL_POLYGON);
	glColor3ub(251, 388, 207);
	glVertex2f(25, 175);
	glVertex2f(300, 175);
	glColor3ub(144, 180, 200);
	glVertex2f(300, 350);
	glVertex2f(25, 350);
	glEnd();

	// office Building Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(25, 175);
	glVertex2f(300, 175);
	glVertex2f(300, 350);
	glVertex2f(25, 350);
	glEnd();

	// office Board
	glBegin(GL_POLYGON);
	glColor3ub(255, 218, 154);
	glVertex2f(50, 375);
	glVertex2f(180, 375);
	glVertex2f(180, 325);
	glVertex2f(50, 325);
	glEnd();

	// office Board Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(50, 375);
	glVertex2f(180, 375);
	glVertex2f(180, 325);
	glVertex2f(50, 325);
	glEnd();

	print("OFFICE", 0, 0, 0, 1, 58, 342, .15, .15, 1.3);

	// office Door
	glBegin(GL_POLYGON);
	glColor3ub(70, 39, 21);
	glVertex2f(55, 175);
	glVertex2f(55, 280);
	glVertex2f(115, 280);
	glVertex2f(115, 175);
	glEnd();

	// office Door Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(55, 175);
	glVertex2f(55, 280);
	glVertex2f(115, 280);
	glVertex2f(115, 175);
	glEnd();

	// office Rectangular Window
	glBegin(GL_POLYGON);
	glColor3ub(59, 91, 132);
	glVertex2f(155, 280);
	glVertex2f(155, 240);
	glVertex2f(270, 240);
	glColor3ub(97, 131, 159);
	glVertex2f(270, 280);
	glEnd();

	// office Rectangular Window Border
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(155, 280);
	glVertex2f(155, 240);
	glVertex2f(270, 240);
	glVertex2f(270, 280);
	glEnd();

	// office Rectangular Window Panes
	glBegin(GL_LINES);
	glColor3ub(20, 20, 20);
	glVertex2f(213, 280);
	glVertex2f(213, 240);
	glVertex2f(155, 260);
	glVertex2f(270, 260);
	glEnd();
}

void s_drawLights() {
	// Left Light Pole
	glLineWidth(4);
	glBegin(GL_LINES);
	glColor3ub(200, 200, 200);
	glVertex2f(350, 175);
	glVertex2f(350, 300);
	glEnd();
	glLineWidth(1);

	// Right Light Pole
	glLineWidth(4);
	glBegin(GL_LINES);
	glColor3ub(200, 200, 200);
	glVertex2f(1050, 175);
	glVertex2f(1050, 300);
	glEnd();
	glLineWidth(1);

	// Left Bulb
	drawCircle(350, 300,
		window_top_r, window_top_g, window_top_b,
		1, 1,
		15);

	// Right Bulb
	drawCircle(1050, 300,
		window_top_r, window_top_g, window_top_b,
		1, 1,
		15);
}

void s_drawStars() {
	if (stars_are_made == false) {
		for (int i = 0, j = 0; i < 40; i++) {
			stars_array[i][j] = 0 + (rand() % (int)(1400 - 0 + 1));
			stars_array[i][j + 1] = 530 + (rand() % (int)(800 - 530 + 1));
			no_of_stars++;
		}
		stars_are_made = true;
	}
	else {
		glPointSize(2);
		glBegin(GL_POINTS);
		glColor4ub(255, 255, 255, star_alpha);
		for (int i = 0, j = 0; i < no_of_stars; i++)
			glVertex2f(stars_array[i][j], stars_array[i][j + 1]);
		glEnd();
		glPointSize(1);
	}
}
void school() {
	// Background
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);

	s_drawBackground();
	s_drawSun();
	s_drawRoad();

	s_drawHome();
	s_drawSchool();
	s_drawoffice();

	s_drawLights();
	s_drawStars();

	drawWoman11(schoolgirl_x, schoolgirl_y, .55, .55,
		120, 120, 120,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20); // skirt

	drawWoman11(schoolgirl_x, schoolgirl_y, .42, .42,
		1, 1, 0,
		229, 49, 49, // top
		37, 107, 202, // ribbon
		229, 21, 49 // skirt
	);

	print("On the way to the School and back home",
		1, 1, 1, hs_subtitle_1_appear, 80, 30, .14, .14, 1);
}
/*scene 4-dance*/
// Function to Draw a Woman
void drawWoman1(GLfloat tx, GLfloat ty, GLfloat sx, GLfloat sy,
	GLfloat hair_r, GLfloat hair_g, GLfloat hair_b,
	GLfloat top_r, GLfloat top_g, GLfloat top_b,
	GLfloat ribbon_r, GLfloat ribbon_g, GLfloat ribbon_b,
	GLfloat skirt_r, GLfloat skirt_g, GLfloat skirt_b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	// Neck
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(203, 166, 108); // Darker Skin
	glVertex2f(507, 380);
	glVertex2f(507, 360);
	glVertex2f(513, 380);
	glVertex2f(513, 360);
	glEnd();
	glLineWidth(1);

	// Face
	drawCircle(510, 407,
		232, 190, 123, // Lighter Skin
		1, 1,
		30);

	// Hair
	drawSemiCircle(510, 420, 1, .6,
		hair_r, hair_g, hair_b,
		35, -90, 90);

	drawSemiCircle(485, 400, .4, 1,
		hair_r, hair_g, hair_b,
		35, -180, 0);

	// Left Eye
	drawCircle(505, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(508, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Right Eye
	drawCircle(530, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(532, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Smile
	drawArc(514, 388, .5, .3,
		20, 20, 20);

	// Nose
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2f(518, 405);
	glVertex2f(522, 398);
	glVertex2f(522, 398);
	glVertex2f(518, 395);
	glEnd();
	glLineWidth(1);

	// Arms
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(470, 340);
	glVertex2f(400 + girlx, 240 + girly);
	//glVertex2f(475, 340);
	//glVertex2f(475, 240);
	//glVertex2f(480, 340);
	//glVertex2f(480, 240);

	glVertex2f(540, 340);
	glVertex2f(600 + girlx, 240 + girly);
	//glVertex2f(545, 340);
	//glVertex2f(545, 240);
	//glVertex2f(550, 340);
	//glVertex2f(550, 240);
	glEnd();
	glLineWidth(1);

	// Top
	glBegin(GL_POLYGON);
	glColor3ub(top_r, top_g, top_b);
	glVertex2f(460, 370);
	glVertex2f(560, 370);
	glVertex2f(540, 300);
	glVertex2f(480, 300);
	glEnd();

	// Skirt
	glBegin(GL_POLYGON);
	glColor3ub(skirt_r, skirt_g, skirt_b);
	glVertex2f(480, 300);
	glVertex2f(540, 300);
	glVertex2f(560, 180);
	glVertex2f(460, 180);
	glEnd();

	// Ribbon
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(ribbon_r, ribbon_g, ribbon_b);
	glVertex2f(480, 300);
	glVertex2f(540, 300);
	glEnd();
	glLineWidth(1);

	// Legs
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(490, 180);
	glVertex2f(490, 150);
	glVertex2f(495, 180);
	glVertex2f(495, 150);

	glVertex2f(525, 180);
	glVertex2f(525, 150);
	glVertex2f(530, 180);
	glVertex2f(530, 150);
	glEnd();
	glLineWidth(1);

	glPopMatrix();
}
// Function to Draw Ceiling
void KG_drawCeiling() {
	// Ceiling
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 800);
	glColor3ub(259, 242, 233); // blue
	glVertex2f(200, 700);
	glColor3ub(259, 242, 233); // blue
	glVertex2f(1400, 700);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(1400, 800);
	glEnd();

	// Border for Ceiling
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 800);
	glVertex2f(200, 700);
	glVertex2f(1400, 700);
	glVertex2f(1400, 800);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Side Wall
void KG_drawSideWall() {
	// Side Wall
	glBegin(GL_POLYGON);
	glColor3ub(259, 242, 33); // green
	glVertex2f(0, 800);
	glColor3ub(259, 242, 233); // blue
	glVertex2f(200, 700);
	glColor3ub(229, 49, 49); // red
	glVertex2f(200, 175);
	glColor3ub(229, 49, 49); // red
	glVertex2f(0, 75);
	glEnd();

	// Border for Side Wall
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 800);
	glVertex2f(200, 700);
	glVertex2f(200, 175);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Center Wall
void KG_drawCenterWall() {
	// Center Wall
	glBegin(GL_POLYGON);
	glColor3ub(259, 242, 33); // green
	glVertex2f(200, 700);
	glColor3ub(259, 242, 233); // blue
	glVertex2f(1400, 700);
	glColor3ub(229, 49, 49); // red
	glVertex2f(1400, 175);
	glColor3ub(229, 49, 49); // red
	glVertex2f(200, 175);
	glEnd();

	// Border for Center Wall
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(200, 700);
	glVertex2f(1400, 700);
	glVertex2f(1400, 175);
	glVertex2f(200, 175);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Floor
void KG_drawFloor() {
	// Floor
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 24);
	glVertex2f(200, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();

	// Border for Floor
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(200, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);

	
}

void dance() {
	// Background
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	KG_drawCeiling();
	KG_drawSideWall();
	KG_drawCenterWall();
	KG_drawFloor();

	// Children
	drawWoman1(0, 1, 1, 1,
		1, 1, 0,
		229, 49, 49, // top
		37, 107, 202, // ribbon
		229, 21, 49 // skirt
	);
	drawWoman1(500, 1, 1, 1,
		1, 1, 0,
		245, 365, 265, // top
		37, 107, 202, // ribbon
		229, 221, 249 // skirt
	);

	drawWoman1(250, 1, 1, 1,
		1, 1, 0,
		329, 349, 349, // top
		37, 107, 202, // ribbon
		229, 121, 149 // skirt
	);

	print("ANNUAL DAY",
		0, 0, 0, hs_subtitle_1_appear, 300, 590, .9, 1, 1);
	print("Children dancing for annual day",
		1, 1, 1, hs_subtitle_1_appear, 80, 10, .14, .14, 1);
}
/*scene 5-school conversation*/
void s_drawLights1() {
	// Left Light Pole
	glLineWidth(4);
	glBegin(GL_LINES);
	glColor3ub(200, 200, 200);
	glVertex2f(350, 175);
	glVertex2f(350, 300);
	glEnd();
	glLineWidth(1);

	// Right Light Pole
	glLineWidth(4);
	glBegin(GL_LINES);
	glColor3ub(200, 200, 200);
	glVertex2f(1050, 175);
	glVertex2f(1050, 300);
	glEnd();
	glLineWidth(1);

	// Left Bulb
	drawCircle(350, 300,
		window_top_r, window_top_g, window_top_b,
		1, 1,
		15);

	// Right Bulb
	drawCircle(1050, 300,
		window_top_r, window_top_g, window_top_b,
		1, 1,
		15);
	//bubble1
	glBegin(GL_POLYGON);
	glColor3ub(250, 250, 250);
	glVertex2f(150, 325);
	glVertex2f(300, 325);
	glVertex2f(300, 275);
	glVertex2f(150, 275);
	glEnd();
	//bubble2
	glBegin(GL_POLYGON);
	glColor3ub(250, 250, 250);
	glVertex2f(550, 325);
	glVertex2f(700, 325);
	glVertex2f(700, 275);
	glVertex2f(550, 275);
	glEnd();
	//bubble3
	glBegin(GL_POLYGON);
	glColor3ub(250, 250, 250);
	glVertex2f(800, 325);
	glVertex2f(950, 325);
	glVertex2f(950, 275);
	glVertex2f(800, 275);
	glEnd();
	//bubble4
	glBegin(GL_POLYGON);
	glColor3ub(250, 250, 250);
	glVertex2f(350, 350);
	glVertex2f(500, 350);
	glVertex2f(500, 300);
	glVertex2f(350, 300);
	glEnd();
}
void school1() {
	// Background
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	
	s_drawBackground();
	s_drawSun();
	s_drawRoad();

	s_drawSchool();

	s_drawLights1();

	//mother
	drawWoman11(190, 200, .55, .55,
		120, 120, 120,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20); // skirt

	//children

	drawWoman11(100, 200, .42, .42,
		1, 1, 0,
		229, 49, 49, // top
		37, 107, 202, // ribbon
		229, 21, 49 // skirt
	);

	drawWoman11(450, 200, .42, .42,
		1, 1, 0,
		245, 365, 265, // top
		37, 107, 202, // ribbon
		229, 221, 249 // skirt
	);

	drawWoman11(600, 200, .42, .42,
		1, 1, 0,
		329, 349, 349, // top
		37, 107, 202, // ribbon
		229, 121, 149 // skirt
	);

	print("Why did you get",
		0, 0, 0, hs_subtitle_1_appear, 802, 302, .08, .08, 2);
	print(" your grandma?",
		0, 0, 0, hs_subtitle_1_appear, 802, 290, .08, .08, 2);
	print("Where's your mum? ",
		0, 0, 0, hs_subtitle_1_appear, 552, 300, .08, .08, 2);

	print("what? no!",
		0, 0, 0, hs_subtitle_1_appear, 152, 300, .08, .1, 2);
	print("Wait,what?",
		0, 0, 0, hs_subtitle_1_appear, 350, 330, .08, .08, 2);
}
/* scene-6 sad mom*/
// Function to Draw Arc
void drawArc1(GLfloat tx, GLfloat ty,
	GLfloat sx, GLfloat sy,
	GLfloat r, GLfloat g, GLfloat b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	glPointSize(2);
	glBegin(GL_POINTS);
	glColor3ub(r, g, b);
	for (GLfloat i = 90; i < 270; i++)
		glVertex2f(15 * sin(i * PI / 180), 15 * -cos(i * PI / 180));
	glEnd();
	glPointSize(1);

	glPopMatrix();
}
// Function to Draw a Woman
void drawWoman2(GLfloat tx, GLfloat ty, GLfloat sx, GLfloat sy,
	GLfloat hair_r, GLfloat hair_g, GLfloat hair_b,
	GLfloat top_r, GLfloat top_g, GLfloat top_b,
	GLfloat ribbon_r, GLfloat ribbon_g, GLfloat ribbon_b,
	GLfloat skirt_r, GLfloat skirt_g, GLfloat skirt_b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	// Neck
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(203, 166, 108); // Darker Skin
	glVertex2f(507, 380);
	glVertex2f(507, 360);
	glVertex2f(513, 380);
	glVertex2f(513, 360);
	glEnd();
	glLineWidth(1);

	// Face
	drawCircle(510, 407,
		232, 190, 123, // Lighter Skin
		1, 1,
		30);

	// Hair
	drawSemiCircle(510, 420, 1, .6,
		hair_r, hair_g, hair_b,
		35, -90, 90);

	drawSemiCircle(485, 400, .4, 1,
		hair_r, hair_g, hair_b,
		35, -180, 0);

	// Left Eye
	drawCircle(505, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(508, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Right Eye
	drawCircle(530, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(532, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Smile
	drawArc1(514, 388, .5, .3,
		20, 20, 20);

	// Nose
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2f(518, 405);
	glVertex2f(522, 398);
	glVertex2f(522, 398);
	glVertex2f(518, 395);
	glEnd();
	glLineWidth(1);

	// Arms
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(470, 340);
	glVertex2f(470, 240);
	glVertex2f(475, 340);
	glVertex2f(475, 240);
	glVertex2f(480, 340);
	glVertex2f(480, 240);

	glVertex2f(540, 340);
	glVertex2f(540, 240);
	glVertex2f(545, 340);
	glVertex2f(545, 240);
	glVertex2f(550, 340);
	glVertex2f(550, 240);
	glEnd();
	glLineWidth(1);

	// Top
	glBegin(GL_POLYGON);
	glColor3ub(top_r, top_g, top_b);
	glVertex2f(460, 370);
	glVertex2f(560, 370);
	glVertex2f(540, 300);
	glVertex2f(480, 300);
	glEnd();

	// Skirt
	glBegin(GL_POLYGON);
	glColor3ub(skirt_r, skirt_g, skirt_b);
	glVertex2f(480, 300);
	glVertex2f(540, 300);
	glVertex2f(560, 180);
	glVertex2f(460, 180);
	glEnd();

	// Ribbon
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(ribbon_r, ribbon_g, ribbon_b);
	glVertex2f(480, 300);
	glVertex2f(540, 300);
	glEnd();
	glLineWidth(1);

	// Legs
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(490, 180);
	glVertex2f(490, 150);
	glVertex2f(495, 180);
	glVertex2f(495, 150);

	glVertex2f(525, 180);
	glVertex2f(525, 150);
	glVertex2f(530, 180);
	glVertex2f(530, 150);
	glEnd();
	glLineWidth(1);

	glPopMatrix();
}
void house1() {
	// Background
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	cg_drawCeiling();
	cg_drawSideWall();
	cg_drawCenterWall();
	cg_drawFloor();


	cg_drawOutside();

	cg_drawDoor();

	// child
	drawWoman(0, 1, 1, 1,
		1, 1, 0,
		229, 49, 49, // top
		37, 107, 202, // ribbon
		229, 21, 49 // skirt
	);
	//mother
	drawWoman2(1, -40, 1.2, 1.2,
		120, 120, 120,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20 // skirt
	);

	print("Child:Mom don't be sad try GARNIER COLOR NATURALS its long lasting.",
		1, 1, 1, hs_subtitle_1_appear, 80, 30, .14, .14, 1);
	print("Mom: Oh,I'll try it.",
		1, 1, 1, hs_subtitle_1_appear, 80, 10, .14, .14, 1);

}
/*scene-7 colorbox*/
void WP_drawcolorbox() {
	// colorbox - Front Face
	glBegin(GL_POLYGON);
	glColor3ub(259, 242, 33);
	glVertex2f(500, 100);
	glVertex2f(800, 100);
	glVertex2f(800, 500);
	glVertex2f(500, 500);
	glEnd();

	// colorbox - Top Face
	glBegin(GL_POLYGON);
	glColor3ub(166, 242, 33);
	glVertex2f(500, 500);
	glVertex2f(800, 500);
	glVertex2f(825, 525);
	glVertex2f(525, 525);
	glEnd();

	// colorbox - Side Face
	glBegin(GL_POLYGON);
	glColor3ub(190, 242, 33);
	glVertex2f(800, 100);
	glVertex2f(825, 150);
	glVertex2f(825, 525);
	glVertex2f(800, 500);
	glEnd();
}

void drawbox() {

	// Rectangular box
	glBegin(GL_POLYGON);
	glColor3ub(250, 149, 60);
	glVertex2f(500, 300);
	glVertex2f(500, 200);
	glVertex2f(800, 200);
	glVertex2f(800, 300);
	glEnd();

	// Rectangular boxBorder
	glBegin(GL_LINE_LOOP);
	glColor3ub(20, 20, 20);
	glVertex2f(500, 300);
	glVertex2f(500, 200);
	glVertex2f(800, 200);
	glVertex2f(800, 300);
	glEnd();
}
// Function to Draw a Woman
void drawWoman3(GLfloat tx, GLfloat ty, GLfloat sx, GLfloat sy,
	GLfloat hair_r, GLfloat hair_g, GLfloat hair_b,
	GLfloat top_r, GLfloat top_g, GLfloat top_b,
	GLfloat ribbon_r, GLfloat ribbon_g, GLfloat ribbon_b,
	GLfloat skirt_r, GLfloat skirt_g, GLfloat skirt_b) {
	glPushMatrix();

	glTranslatef(tx, ty, 0);
	glScalef(sx, sy, 0);

	// Neck
	glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(203, 166, 108); // Darker Skin
	glVertex2f(607, 380);
	glVertex2f(607, 360);
	glVertex2f(613, 380);
	glVertex2f(613, 360);
	glEnd();
	glLineWidth(1);

	// Face
	drawCircle(610, 400,
		232, 190, 123, // Lighter Skin
		1, 1,
		30);

	// Hair
	drawSemiCircle(610, 420, 1, .6,
		hair_r, hair_g, hair_b,
		35, -90, 90);

	drawSemiCircle(585, 400, .4, 1,
		hair_r, hair_g, hair_b,
		35, -180, 0);

	// Left Eye
	drawCircle(605, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(608, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Right Eye
	drawCircle(630, 410,
		250, 250, 250,
		1, 1,
		5);

	drawCircle(632, 408,
		10, 10, 10,
		1, 1,
		2.5);

	// Smile
	drawArc(614, 388, .5, .3,
		20, 20, 20);

	// Nose
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex2f(618, 405);
	glVertex2f(622, 398);
	glVertex2f(622, 398);
	glVertex2f(618, 395);
	glEnd();
	glLineWidth(1);

	// Arms
	/*glLineWidth(10);
	glBegin(GL_LINES);
	glColor3ub(232, 190, 123); // Lighter Skin
	glVertex2f(470, 340);
	glVertex2f(470, 240);
	glVertex2f(475, 340);
	glVertex2f(475, 240);
	glVertex2f(480, 340);
	glVertex2f(480, 240);

	glVertex2f(540, 340);
	glVertex2f(540, 240);
	glVertex2f(545, 340);
	glVertex2f(545, 240);
	glVertex2f(550, 340);
	glVertex2f(550, 240);
	glEnd();
	glLineWidth(1);*/

	// Top
	glBegin(GL_POLYGON);
	glColor3ub(top_r, top_g, top_b);
	glVertex2f(560, 370);
	glVertex2f(660, 370);
	glVertex2f(640, 300);
	glVertex2f(580, 300);
	glEnd();

}
void colorbox1() {
	// Background
	glClearColor(6, 0.05, 0.9, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	WP_drawcolorbox();
	drawbox();
	// Mother
	drawWoman3(0, 10, 1, 1,
		20, 20+v, 20+v,
		229, 49, 49, // top
		37, 107, 202, // bottom
		229, 49, 49 // skirt
	);
	// Story Title
	print("GARNIER HAIR NATURALS",
		1, 1, 1, hs_subtitle_1_appear, 500, 205, .13, .9, 2);

	print("LONG LASTING HAIR COLOR, AMMONIA FREE HAIR COLOR",
		1, 1, 1, title_fade, 840, 320, .1, .1, 1);
}
/*scene 8-before/after*/
// Function to Draw Ceiling
void CG_drawCeiling() {
	// Ceiling
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 800);
	glColor3ub(259, 242, 233); // Light Brown
	glVertex2f(0, 700);
	glColor3ub(259, 242, 233); // Light Brown
	glVertex2f(1400, 700);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(1400, 800);
	glEnd();

	// Border for Ceiling
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 800);
	glVertex2f(0, 700);
	glVertex2f(1400, 700);
	glVertex2f(1400, 800);
	glEnd();
	glLineWidth(1);
}
// Function to Draw Center Wall
void CG_drawCenterWall() {
	// Center Wall
	glBegin(GL_POLYGON);
	glColor3ub(259, 242, 233); // Light Blue
	glVertex2f(0, 700);
	glColor3ub(259, 242, 233); // Light Blue
	glVertex2f(1400, 700);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(1400, 175);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 75);
	glEnd();

	// Border for Center Wall
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 700);
	glVertex2f(1400, 700);
	glVertex2f(1400, 175);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);
}

// Function to Draw Floor
void CG_drawFloor() {
	// Floor
	glBegin(GL_POLYGON);
	glColor3ub(166, 148, 124); // Dark Brown
	glVertex2f(0, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();

	// Border for Floor
	glLineWidth(2);
	glBegin(GL_LINE_LOOP);
	glColor3ub(0, 0, 0); // Black
	glVertex2f(0, 175);
	glVertex2f(1400, 175);
	glVertex2f(1400, 75);
	glVertex2f(0, 75);
	glEnd();
	glLineWidth(1);
}
void CG_line() {
	// clock
	drawCircle(900, 600,
		1, 1, 1,
		40, 40,
		1);
	// clockhands
	glBegin(GL_LINES);
	glColor3ub(250, 250, 250);
	glVertex2f(900, 630);
	glVertex2f(900, 600);
	glVertex2f(930, 590);
	glVertex2f(900, 600);
	glEnd();

	glBegin(GL_LINES);
	glColor3ub(250, 250, 250);
	glVertex2f(700, 900);
	glVertex2f(700, 75);
	glEnd();
	//2nd clock
	drawCircle(300, 600,
		1, 1, 1,
		40, 40,
		1);
	// clockhands
	glBegin(GL_LINES);
	glColor3ub(250, 250, 250);
	glVertex2f(300, 630);
	glVertex2f(300, 600);
	glVertex2f(320, 630);
	glVertex2f(300, 600);
	glEnd();
}

void colorchange() {
	// BackGround
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	CG_drawCeiling();
	CG_drawCenterWall();
	CG_drawFloor();

	CG_line();

	// MOM
	drawWoman(400, -10, 1.2, 1.2,
		1, 1, 0,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20 // skirt
	);
	drawWoman2(-100, -10, 1.2, 1.2,
		120, 120, 120,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20 // skirt
	);

	print("               BEFORE                                          AFTER",
		1, 1, 1, hs_subtitle_1_appear, 80, 30, .14, .14, 1);
}
void final() {
	// Background
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	cg_drawCeiling();
	cg_drawSideWall();
	cg_drawCenterWall();
	cg_drawFloor();


	cg_drawOutside();

	cg_drawDoor();

	// child
	drawWoman(0, 1, 1, 1,
		1, 1, 0,
		229, 49, 49, // top
		37, 107, 202, // ribbon
		229, 21, 49 // skirt
	);
	//mother
	drawWoman(1, -40, 1.2, 1.2,
		1, 1, 0,
		200, 20, 20, // top
		200, 200, 100, // ribbon
		20, 20, 20 // skirt
	);

	print("Mom: Thanks to GARNIER HAIR NATURALS!",
		1, 1, 1, hs_subtitle_1_appear, 80, 30, .14, .14, 1);
	print("Child: Let's see who calls you grandma now!",
		1, 1, 1, hs_subtitle_1_appear, 80, 10, .14, .14, 1);
}
// Function to Render Scene
void renderScene() {
	// Switch to know which scene is playing
	switch (SCENE_ID) {
	case 0:
		introduction();
		break;
	case 1:
		house();
		break;
	case 2:
		school();
		break;
	case 3:
		dance();
		break;
	case 4:
		school1();
		break;
	case 5:
		house1();
		break;
	case 6:
		colorbox1();
		break;
	case 7:
		colorchange();
		break;
	case 8:
		final();
		break;
	default:
		break;
	}

	// glFush sends it to the Display Buffer
	glFlush();
}
// Function to Handle Mouse Clicks
void mouseClick(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
		std::cout << x << "\t" << 800 - y << "\n";
}
// Animator Updation Function
void update(int) {
	// Introduction
	if (SCENE_ID == 0) {
		if (title_fade < 1)
			title_fade += 1;
		else
			intro_next_text_appear = 1;
	}
	if (SCENE_ID == 1) {
		hs_subtitle_1_appear = 1;
	}
	// school
	if (SCENE_ID == 2) {
		if (!chapter_1_done) {
			delay(1);
			schoolgirl_y -= 5000;
			chapter_1_done = true;
		}

		if (chapter_1_done && !chapter_2_done) {
			if (schoolgirl_x >= 500) {
				schoolgirl_x -= 5;
			}
			else {
				schoolgirl_y += 5000;
				chapter_2_done = true;
			}
		}

		if (chapter_1_done && chapter_2_done && !chapter_3_done && !sun_has_set) {
			if (sun_r <= 255)
				sun_r += .25;
			if (sun_g <= 255)
				sun_g += .25;
			if (sun_b <= 255)
				sun_b += .25;

			if (star_alpha <= 200)
				star_alpha += 1;

			if (grass_r <= 255)
				grass_r += .25;
			if (grass_g <= 220)
				grass_g += .25;
			if (grass_b >= 65)
				grass_b += .25;

			if (window_top_r <= 255)
				window_top_r += .25;
			if (window_top_g <= 220)
				window_top_g += .25;
			if (window_top_b >= 65)
				window_top_b -= .25;

			if (window_bottom_r <= 255)
				window_bottom_r += .25;
			if (window_bottom_g <= 220)
				window_bottom_g += .25;
			if (window_bottom_b >= 65)
				window_bottom_b -= .25;

			if (sky_r <= 0)
				sky_r += .25;
			if (sky_g >= 0)
				sky_g -= .25;
			if (sky_b >= 0)
				sky_b -= .25;

			if (sun_move_left < 1100)
				sun_move_left += 5;
			else
				sun_has_set = true;

			if (sun_move_left > 500)
				sun_moved_half = true;
		}

		if (sun_has_set) {
			if (schoolgirl_y != 220)
				schoolgirl_y -= 5000;
			chapter_5_done = true;
		}

		if (chapter_5_done) {
			if (schoolgirl_x <= 900)
				schoolgirl_x += 5;
			else {
				if (schoolgirl_y != 5220)
					schoolgirl_y += 5000;
			}

			if (hs_subtitle_1_appear < 1) {
				hs_subtitle_1_appear += .005;
			}
		}
		// dance
		if (SCENE_ID == 3) {
			hs_subtitle_1_appear = 1;
			if (girly == 0)
			{
				girly = 200;
				//delay(1);
			}
			else
			{
				girly = 0;
				//delay(1);
			}
		}
		// school1
		if (SCENE_ID == 4) {

			if (hs_subtitle_1_appear < 1) {
				hs_subtitle_1_appear += .005;
			}

		}
		// house1
		if (SCENE_ID == 5) {
			hs_subtitle_1_appear = 1;

		}
		// colorbox1
		if (SCENE_ID == 6) {
			hs_subtitle_1_appear = 1;
			
		}
		// colorchange
		if (SCENE_ID == 7) {
			hs_subtitle_1_appear = 1;
		}
		// final
		if (SCENE_ID == 8) {
			hs_subtitle_1_appear = 1;
		}
	}
	// Recalls the Display Function
	glutPostRedisplay();

	// Creates a Timer of 25ms
	glutTimerFunc(25, update, 0);
}

// Keyboard Action
void keyPress(unsigned char key, int x, int y) {
	switch (key) {
		// Go to Previous Scene
	case 'b':
	case 'B':
		if (SCENE_ID == 0)
			break;
		SCENE_ID--;
		break;
		// Go to Next Scene
	case 'n':
	case 'N':
		if (SCENE_ID == 15)
			break;
		SCENE_ID++;
		break;
		// Quit Story
	case 'q':
	case 'Q':
		exit(0);
		break;
		//to make the girls dance
	case 'P':
	case 'p':if (girly == 0)
	{
		girly = 200;
		//delay(1);
	}
			 else
	{
		girly = 0;
		//delay(1);
	}
			 break;
			 //to change color
	case 'C':
	case 'c':for (i = 0; i <= 10; i++)
		v = v + 50;
		break;
	default:
		break;
	}
	
	glutPostRedisplay();
}

// Function to Initialize Screen
void initializeScreen() {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, 1400, 0, 800);
}

// Main Function
int main(int argc, char **argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1400, 800);
	glutCreateWindow("Garnier Hair Naturals");

	// Enables Transparency
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glEnable(GL_BLEND);

	// Enable Smoothening
	glEnable(GL_LINE_SMOOTH);
	glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);

	// Display Function
	glutDisplayFunc(renderScene);

	// Input Functions
	glutKeyboardFunc(keyPress);
	glutMouseFunc(mouseClick);

	initializeScreen();

	// Timer Function
	// every 25 milliseconds, update function is called
	glutTimerFunc(25, update, 0);

	glutMainLoop();

	return 0;
}
